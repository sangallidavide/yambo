#! @SHELL@
#
#        Copyright (C) 2000-2020 the YAMBO team
#              http://www.yambo-code.org
#
# Authors (see AUTHORS file for details): AM
# 
# This file is distributed under the terms of the GNU 
# General Public License. You can redistribute it and/or 
# modify it under the terms of the GNU General Public 
# License as published by the Free Software Foundation; 
# either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will 
# be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU General Public License 
# for more details.
#
# You should have received a copy of the GNU General Public 
# License along with this program; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place - Suite 330,Boston, 
# MA 02111-1307, USA or visit http://www.gnu.org/copyleft/gpl.txt.
#
os="@build_os@"
cpp="@CPP@"
fpp="@FPP@"
cppflags="@CPPFLAGS_yambo@"
ECHO_N="@ECHO_N@"
PREFIX="@MKMF_PREFIX@"
KEEPSRC="@enable_keep_src@"
INCLUDEDIR="@compdir@/@includedir@"
#
if [ $# = 0 ] ; then
 echo $0 "dir target objectfile mode(l/x) Dflag1 Dflag2 Dflag3 ..."
 exit 0
fi
cdir=$1
target=$2
ofile=$3
mode=$4
libs=$5
if [ ! -f $cdir/$ofile ]; then exit 0; fi
if [ -f $cdir/Makefile ] ; then rm -f $cdir/Makefile ;  fi
#
llibs=""
lock_file="__lock"
dep_file="make.dep"
modlist_file="modfiles.list"
for arg in $@; do
 case $arg in
  -D_MPI)
   dmpi="yes" ;
   dopts="$dopts $arg";
   ;;
  -D_64BIT_OFFSET|-D_SLEPC_OFF)
   dopts="$dopts $arg";
   ;;
  -D_*) 
   dopts="$dopts $arg"
   a=`echo $arg  | sed "s/-D_/_/"`
   lock_file="$lock_file$a"
   ;;
  -l*) 
   llibs="$arg $llibs"
   ;;
 esac
done
#
comp_modules="$INCLUDEDIR//modules_"
for arg in $@; do
 case $arg in
  -D_MPI|-D_OPENMP|-D_CUDA|-D_DOUBLE|-D_TIMING|-D_PAR_IO|-D_HDF5_IO|-D_64BIT_OFFSET|-D_NC_CLASSIC|-D_OPENMP_INT_LINALG|-D_SLEPC)
   a=`echo $arg  | sed "s/-D_/_/"`
   comp_modules="$comp_modules$a";
   ;;
 esac
done
for arg in $@; do
 case $arg in
  -D_SLEPC_OFF)
   comp_modules=`echo $comp_modules  | sed "s/_SLEPC//"`;
   lock_file=`echo $lock_file  | sed "s/_SLEPC//"`;
   ;;
 esac
done
comp_modules=`echo $comp_modules | sed "s/_DOUBLE//2"`;
lock_file=`echo $lock_file  | sed "s/_DOUBLE//2"`;
#
# Libraries & Includes
#
llibs="-L\$(libdir) $llibs"
#
idriver="@IFLAG@\$(libdir)/yambo/driver/include @IFLAG@\$(includedir)/driver"
lf90include="@IFLAG@\$(includedir) @IFLAG@\$(modinclude) @IFLAG@\$(includedir)/headers/common @IFLAG@\$(includedir)/headers/parser \$(idriver)"
#
llocal="-lqe_pseudo -lmath77 -lslatec -llocal"
lPLA="\$(lscalapack) \$(lslepc) \$(lpetsc) \$(llapack) \$(lblacs) \$(lblas)"
lIO="\$(liotk) \$(lpnetcdf) \$(lnetcdff) \$(lnetcdf) \$(lhdf5)"
lextlibs="\$(llibxc) \$(lfft) \$(lfutile) \$(lyaml)"
#
lf90libinclude="\$(iiotk) \$(ipnetcdf) \$(inetcdff) \$(inetcdf) \$(ipetsc) \$(islepc) \$(ihdf5) \$(ilibxc) \$(ifft) \$(ifutile) \$(iyaml) \$(idriver)"
#
case $target in
  yambo*)
   llibs="$llibs $llocal $lPLA $lIO $lextlibs -lm"
    ;;
  a2y|elk2y|c2y)
   llibs="-lint_modules $llibs $llocal $lPLA $lIO $lextlibs -lm"
    ;;
  p2y*)
   llibs="-lint_modules $llibs $llocal $lPLA $lIO $lextlibs -lm"
    ;;
  e2y)
   llibs="-lint_modules $llibs $llocal $lPLA $lIO $lextlibs -lm"
    ;;
  ypp*)
   llibs="$llibs $llocal $lPLA $lIO $lextlibs -lm"
    ;;
  lib*)
    ;;
esac

cat config/setup >>$cdir/Makefile
echo "llibs=$llibs" >> $cdir/Makefile
echo "linclude=$lf90include" >> $cdir/Makefile
echo "lf90libinclude=$lf90libinclude" >> $cdir/Makefile
echo "lf90include=$lf90include" >> $cdir/Makefile
echo "modinclude=$comp_modules" >> $cdir/Makefile
echo "mfiles=find . -maxdepth 1 -name '*.mod'" >> $cdir/Makefile
echo "target=$target" >> $cdir/Makefile
echo "dmpi=$dmpi" >> $cdir/Makefile
echo "dopts=$dopts -D_\$(os)" >> $cdir/Makefile
echo "lock_file=$lock_file" >> $cdir/Makefile
echo "dep_file=$dep_file" >> $cdir/Makefile
echo "modlist_file=$modlist_file" >> $cdir/Makefile
cp $cdir/$ofile $cdir/$ofile.c
$cpp $cppflags $dopts -D_$os -D_$target $cdir/$ofile.c >> $cdir/Makefile
rm -f $cdir/$ofile.c

if [ "$mode" = "x" ] ; then 
cat << EOF >> $cdir/Makefile
\$(target): \$(dep_file) \$(objs)
	\$(driver)
	\$(link)
	\$(modmove)
	\$(dircheck)
	@mv \$@ \$(exec_prefix)
EOF
else
rm -f ./lib/$target
cat << EOF >> $cdir/Makefile
\$(target): \$(dep_file) arcreate
	\$(modmove) 
EOF
fi

cat << EOF >> $cdir/Makefile
\$(lock_file):
	\$(modpath)
	${PREFIX}if test ! -f \$(lock_file) && test "\$(keep_objs)" = "no" ; then \
	find . \( -name '*.o' -o -name '*.mod' -o -name '__*' \) | xargs rm -f ; \
	touch \$(lock_file); rm -f \$(dep_file); rm -f \$(modlist_file); fi
	${PREFIX}if test "\$(keep_objs)" = "yes"; \
	then \$(compdir)/sbin/objects_store.sh \$(lock_file); rm -f \$(dep_file); rm -f \$(modlist_file); fi
	${PREFIX}if test "\$(keep_objs)" = "no"; then rm -f \$(dep_file); rm -f \$(modlist_file); fi

\$(dep_file): \$(lock_file)
	cd \$(srcdir)/$cdir; \$(srcdir)/sbin/moduledep.sh \$(objs) > \$(compdir)/$cdir/\$(dep_file)

arcreate: \$(objs)
	${PREFIX}(eval \$(ar) \$(arflags) \$(target) \$(objs)) > /dev/null
	${PREFIX}mv \$(target) \$(libdir) ; chmod u+x \$(libdir)/\$(target)
#
# Functions
#
define driver
 ${PREFIX}( eval \$(cc) \$(cflags) \$(dopts) \$(linclude) -L\$(libdir) -D_\$@ -c \$(libdir)/yambo/driver/src/driver/driver.c > /dev/null)
 @echo
endef
define link
 ${PREFIX}(eval \$(fc) \$(fcflags) \$(lf90include) \$(lf90libinclude) -o \$@ driver.o \$(objs) \$(llibs) ) > /dev/null
endef
define modpath
 ${PREFIX}if test ! -d $comp_modules; then echo "creating folder $comp_modules" ; fi
 ${PREFIX}if test ! -d $comp_modules; then mkdir $comp_modules ; fi
endef
define modmove
 ${PREFIX}test \`\$(mfiles) | wc -l\` -eq 0 || \$(mfiles) > \$(modlist_file)
 ${PREFIX}test \`\$(mfiles) | wc -l\` -eq 0 ||  mv *.mod $comp_modules
endef
define dircheck
 ${PREFIX}if test ! -d \$(exec_prefix); then mkdir \$(exec_prefix);fi
endef
#
# Sources that do not want optimization
#
F77_NOOPT_SRC= xerbla.o slamch.o
#
\$(F77_NOOPT_SRC):
	${PREFIX}(eval \$(f77) -c \$(fuflags) \$(srcdir)/$cdir/\$*.f) > /dev/null
EOF
rm_command="@rm -f \$*\$(f90suffix)"
if [ "$KEEPSRC" == "yes" ]; then rm_command=" "; fi ;
FC_NOOPT_SRC="mod_parser_m.o mod_logo.o"
for arg in $@; do
 case $arg in
  -D_PGI)
   FC_NOOPT_SRC="$FC_NOOPT_SRC bz_samp_indexes.o" ;;
 esac
done
cat << EOF >> $cdir/Makefile
#
FC_NOOPT_SRC= ${FC_NOOPT_SRC}
#
\$(FC_NOOPT_SRC):
	${rm_command}
	${PREFIX}(eval \$(fpp) \$(dopts) \$(linclude) \$(srcdir)/$cdir/\$*.F > \$*.tmp_source)
	@\$(srcdir)/sbin/replacer.sh \$*.tmp_source
	@mv \$*.tmp_source_space \$*\$(f90suffix)
	${PREFIX}(eval \$(fc) -c \$(fcuflags) \$(lf90include) \$(lf90libinclude) \$*\$(f90suffix)) > /dev/null
	@echo $ECHO_N \$* " "
	${rm_command}
#
# Special sources
#
FC_LOCAL_SRC= sgfft.o
\$(FC_LOCAL_SRC):
	@rm -f \$*\$(f90suffix)
	${PREFIX}(eval \$(fpp) \$(dopts) \$*.F > \$*\$(f90suffix)) > /dev/null
	${PREFIX}(\$(fc) -c \$(fcflags) \$(lf90include) \$(lf90libinclude) \$*\$(f90suffix)) > /dev/null
	@echo $ECHO_N \$*".F "

#
# Suffixes
#
.SUFFIXES: .F .f90 .c .f .o .a
#
# Includes
#
-include \$(dep_file)
#
# Rules
#
EOF
cat << EOF >> $cdir/Makefile
.F.o:
	${rm_command}
	${PREFIX}(eval \$(fpp) \$(dopts) \$(lf90include) \$(lf90libinclude) \$(srcdir)/$cdir/\$*.F > \$*.tmp_source)
	@\$(srcdir)/sbin/replacer.sh \$*.tmp_source
	@mv \$*.tmp_source_space \$*\$(f90suffix)
	${PREFIX}(\$(fc) -c \$(fcflags) \$(lf90include) \$(lf90libinclude) \$*\$(f90suffix)) > /dev/null
	${rm_command}
	@echo $ECHO_N \$*".F "
EOF
cat << EOF >> $cdir/Makefile
.f.o:
	${PREFIX}(eval \$(f77) -c \$(fflags) \$(srcdir)/$cdir/\$*.f)
	@echo $ECHO_N \$*".f "
.c.o:
	${PREFIX}(eval \$(cc) \$(cflags) \$(dopts) \$(linclude) -c \$(srcdir)/$cdir/\$*.c) > /dev/null
	@echo $ECHO_N \$*".c"
EOF
