!
! License-Identifier: GPL
!
! Copyright (C) 2016 The Yambo Team
!
! Authors (see AUTHORS file for details): MG CA
!
subroutine Build_W_operator(en,Xk,ik,i_sp,V_bands,Wk)
 !
 ! Build the Hermitian W operator eq. 62 and 63
 ! in PRB 69, 085106 (2004)
 !
 use pars,           ONLY:SP,cI,cONE,cZERO,pi
 use units,          ONLY:SPEED_OF_LIGHT
 use electrons,      ONLY:levels
 use electric,       ONLY:l_force_SndOrd
 use QP_m,           ONLY:QP_nk
 use hamiltonian,    ONLY:H_ref_bands,H_ref_nbands
 use R_lattice,      ONLY:bz_samp,k_map
 use D_lattice,      ONLY:a
 use wrapper,        ONLY:M_by_M
 use matrix_operate, ONLY:hermitian
 !
 implicit none
 !
 type(levels), intent(in)      :: en
 type(bz_samp),intent(in)      :: Xk
 integer,      intent(in)      :: ik
 integer,      intent(in)      :: i_sp
 complex(SP),  intent(in)      :: V_bands(H_ref_bands(2),en%nbf(i_sp),QP_nk)
 complex(SP),  intent(out)     :: Wk(3,H_ref_bands(1):H_ref_bands(2),H_ref_bands(1):H_ref_bands(2))
 !
 ! Work Space
 !
 integer :: i1,i2,im,id,id_red
 integer :: ikbz,istep,max_step
 !
 complex(SP) :: Wop(H_ref_bands(1):H_ref_bands(2),H_ref_bands(1):H_ref_bands(2),2)
 complex(SP) :: V_tilde(en%nbf(i_sp),H_ref_bands(1):H_ref_bands(2),2)
 complex(SP) :: delta_V_tilde(en%nbf(i_sp),H_ref_bands(1):H_ref_bands(2))
 complex(SP) :: V_tmp(H_ref_bands(1):H_ref_bands(2),en%nbf(i_sp))
 complex(SP) :: alpha
 !
 Wk=cZERO
 !
 ikbz=Xk%k_table(ik,1)
 !
 do id_red=1,3  ! loop on reciprocal lattice
   !
   if(k_map%max_kdir(id_red)/=1) then
     !
     max_step=1
     !
     ! I need at leat 5 k-points in the line to
     ! use the second order formula
     !
     if(k_map%max_kdir(id_red)>=6.and..not.l_force_SndOrd) max_step=2
     !
     do istep=1,max_step
       !
       call Build_tilde_vbands(en,Xk,ikbz,i_sp,istep,id_red,V_bands,V_tilde)
       !
       ! Build the W operator as
       !
       ! W(j,i) = \sum_m V*(i,m) * [\tilde Vp(m,j) - \tilde Vm(m,j) ]
       !
       ! Eq. (C13) in PRB 69, 085106 [sum_sigma  di eq. (61) PRB 69, 085106 (2004)]
       !
       delta_V_tilde=V_tilde(:,:,1)-V_tilde(:,:,2)
       !
       alpha=cI*real(k_map%max_kdir(id_red),SP)/(4._SP*pi*real(istep,SP))
       ! 
       V_tmp=conjg(V_bands(H_ref_bands(1):,:,ik))
       !
       call M_by_M('N', 'N', H_ref_nbands, H_ref_nbands, en%nbf(i_sp),alpha, V_tmp, &
&            size(V_tmp, 1), delta_V_tilde, size(delta_V_tilde, 1), cZERO, Wop(:,:,istep), H_ref_nbands)
       !
       Wop(:,:,istep)=transpose(Wop(:,:,istep))
       !
     enddo
     !
   else ! non-periodic directions 
     !
     ! <\phi_i | e^{iGr} | \phi_j >
     ! It works in principle but it requires big supercells
     !
     Wop(:,:,:)=cZERO !DIP_S(H_ref_bands(1):,H_ref_bands(1):,id_red,ik,i_sp)*cI/(4._SP*pi)   
     !
   endif    
   !
   ! Transform in cartesian coordinates 
   !
   if(max_step==1) then
     !      
     ! First order formula D(dk)      
     ! Eq. 96 of PRB 63, 155107(2001)
     !
     !$omp parallel do default(shared), private(id)
     do id=1,3
       Wk(id,:,:)=Wk(id,:,:)+Wop(:,:,1)*a(id_red,id)
     enddo
     !$omp end parallel do
     !
   else
     !      
     ! Second order formula   ( 4*D(dk) - D(2*dk) ) / 3
     ! Eq. 97 of PRB 63, 155107(2001)
     !
     !$omp parallel do default(shared), private(id)
     do id=1,3
       Wk(id,:,:)=Wk(id,:,:)+(4._SP*Wop(:,:,1)-Wop(:,:,2))/3._SP*a(id_red,id)
     enddo
     !$omp end parallel do
     !
   endif
   !
 enddo ! loop on id_red
 !
 ! Make an Hermitian operator: Eq. 64 of PRB 69 085106
 ! and discussion above 
 !
 !$omp parallel do default(shared), private(id)
 do id=1,3
   Wk(id,H_ref_bands(1):H_ref_bands(2),H_ref_bands(1):H_ref_bands(2))=                     &
   &     (Wk(id,H_ref_bands(1):H_ref_bands(2),H_ref_bands(1):H_ref_bands(2))               &
   &      +hermitian(Wk(id,H_ref_bands(1):H_ref_bands(2),H_ref_bands(1):H_ref_bands(2))))
 enddo
 !$omp end parallel do
 !
end subroutine Build_W_operator
