!
! License-Identifier: GPL
!
! Copyright (C) 2018 The Yambo Team
!
! Authors (see AUTHORS file for details): MG CA
!
subroutine Build_tilde_vbands(en,Xk,ikbz,i_sp,istep,id_red,V_bands,V_tilde)
 !
 ! Build the \tilde Valence bands as defined in Eq. 53 of
 ! PRB 69, 085106 (2004), in terms of Kohn-Sham orbitals
 !
 use pars,           ONLY:SP,cZERO,cONE
 use electrons,      ONLY:levels
 use electric,       ONLY:Sm1_plus,Sm1_minus
 use QP_m,           ONLY:QP_nk
 use hamiltonian,    ONLY:H_ref_bands,H_ref_nbands
 use R_lattice,      ONLY:bz_samp,k_map
 use vec_operate,    ONLY:k_periodic_idx
 use DIPOLES,        ONLY:DIP_S
 use wrapper_omp,    ONLY:M_by_M_omp,V_dot_V_omp
 use wrapper,        ONLY:mm_cgemm
 !
 implicit none
 !
 type(levels), intent(in)      :: en
 type(bz_samp),intent(in)      :: Xk
 integer,      intent(in)      :: ikbz
 integer,      intent(in)      :: i_sp
 integer,      intent(in)      :: istep
 integer,      intent(in)      :: id_red
 complex(SP),  intent(in)      :: V_bands(H_ref_bands(2),en%nbf(i_sp),QP_nk)
 complex(SP),  intent(out)     :: V_tilde(en%nbf(i_sp),H_ref_bands(1):H_ref_bands(2),2)
 !
 ! Work Space
 !
 integer :: i2,iv1,im,idx(3),id,ikp,ikm
 integer :: ikm_ibz,ikp_ibz,n_bf
 complex(SP) :: tmp_Vp(H_ref_bands(2),en%nbf(i_sp)),tmp_Vm(H_ref_bands(2),en%nbf(i_sp))
 !
 V_tilde=cZERO
 n_bf=en%nbf(i_sp)
 !
 if(k_map%max_kdir(id_red)==1) return
 !
 idx=k_map%k_map_inv(ikbz,:)
 idx(id_red)=idx(id_red)-istep
 idx=k_periodic_idx(idx,k_map)
 ikm=k_map%k_map_dir(idx(1),idx(2),idx(3))
 !
 idx=k_map%k_map_inv(ikbz,:)
 idx(id_red)=idx(id_red)+istep
 idx=k_periodic_idx(idx,k_map)
 ikp=k_map%k_map_dir(idx(1),idx(2),idx(3))
 !
 ! Indexes in the IBZ
 ! 
 ikm_ibz=Xk%sstar(ikm,1)
 ikp_ibz=Xk%sstar(ikp,1)
 !
 ! Construct \tilde V_bands(k,k+dk) and \tilde V_bands(k,k-dk)
 !
 ! Eqs. (C11) and (C13) in PRB 69, 085106 (2004)
 !
 ! Build Vp=V'(k+dk)_{i,m} and Vm=V'(k-dk)_{i,m} (stored in tmp_Vp and tmp_Vm)
 !     
 ! V'(k+dk)_{i,m} = \sum_{j} S(k,k+dk)_{i,j}   V(k+dk)_{j,m}
 !
 ! V'(k-dk)_{i,m} = \sum_{j} S^H(k-dk,k)_{i,j} V(k-dk)_{j,m} = \sum_{j} S(k,k-dk)_{i,j} V(k-dk)_{j,m}
 !
 ! m,n indexes on valence bands
 !
 ! i,j indexes on all bands CMR basis
 !
 call M_by_M_omp('N','N',H_ref_nbands,n_bf,H_ref_bands(2),cONE,  &
&  DIP_S(H_ref_bands(1):,:,id_red+(istep-1)*3,ikbz,i_sp),H_ref_nbands, &
&  V_bands(:,:n_bf,ikp_ibz),H_ref_bands(2),cZERO,tmp_Vp(H_ref_bands(1):,:n_bf),H_ref_nbands)
 !
 call M_by_M_omp('C','N',H_ref_nbands,n_bf,H_ref_bands(2),cONE,  &
&  DIP_S(:,H_ref_bands(1):,id_red+(istep-1)*3,ikm ,i_sp),H_ref_bands(2), &
&  V_bands(:,:n_bf,ikm_ibz),H_ref_bands(2),cZERO,tmp_Vm(H_ref_bands(1):,:n_bf),H_ref_nbands)
 !
 ! Eq. (53) in PRB 69, 085106 (2004), derived in appendix (C), see eq. C(11)
 !
 ! \tilde V(k+dk)_{n,i} = \sum_m S^-1(k,k+dk)_{m,n} * V'(k+dk)_(i,m)
 ! \tilde V(k-dk)_{n,i} = \sum_m S^-1(k,k-dk)_{m,n} * V'(k-dk)_(i,m)
 ! 
 ! Build V_tilde(:,:,1) = Sm1_plus^T * tmp_Vp^T
 !        
 call mm_cgemm('T', 'T', n_bf, H_ref_nbands, n_bf, cONE, &
           Sm1_plus(:n_bf, 1, id_red+(istep-1)*3, ikbz, i_sp), n_bf, &
           tmp_Vp(H_ref_bands(1):, :n_bf), H_ref_nbands, &
           cZERO, V_tilde(:, H_ref_bands(1):, 1), n_bf)

 !  
 ! Build V_tilde(:,:,2) = Sm1_minus^T * tmp_Vm^T
 !  
 call mm_cgemm('T', 'T', n_bf, H_ref_nbands, n_bf, cONE, &
           Sm1_minus(:n_bf, 1, id_red+(istep-1)*3, ikbz, i_sp), n_bf, &
           tmp_Vm(H_ref_bands(1):, :n_bf), H_ref_nbands, &
           cZERO, V_tilde(:, H_ref_bands(1):, 2), n_bf)
 !
 ! with (see Build_overlaps_det_NEQ)
 !
 ! S^-1(k,k+dk)_{n,m} =sum_{i,j} V^\dag(k)_(n,i) S     (k,k+dk)_{i,j} V(k-dk)_(j,n)
 ! S^-1(k,k-dk)_{n,m} =sum_{i,j} V^\dag(k)_(n,i) S^\dag(k-dk,k)_{i,j} V(k-dk)_(j,n)
 !
 ! This is the NEQ version of  (see Build_overlaps_det_NEQ)
 !
 ! S^-1(k,k+dk)_{n,m} = S     (k,k+dk)_{n,m}
 ! S^-1(k,k-dk)_{n,m} = S^\dag(k-dk,k)_{n,m}
 !
end subroutine Build_tilde_vbands
