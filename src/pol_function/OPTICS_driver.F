!
! License-Identifier: GPL
!
! Copyright (C) 2006 The Yambo Team
!
! Authors (see AUTHORS file for details): AM, DS
!
subroutine OPTICS_driver(Xen,Xk,q,wv,X,Dip)
 ! 
 ! Optics driver
 !
 ! Calculates dielectric function for a generic q vector.
 ! 
 use pars,          ONLY:SP,cZERO,pi
 use drivers,       ONLY:l_rpa_IP,l_bs_fxc,l_alda_fxc
 use frequency,     ONLY:w_samp
 use electrons,     ONLY:levels,n_spin
 use R_lattice,     ONLY:bz_samp
 use DIPOLES,       ONLY:DIPOLE_t
 use X_m,           ONLY:X_t,X_par,X_fxc,X_Double_Grid_setup,X_par_lower_triangle,&
&                        X_DbGd_nkpt_at_q,X_DbGd_nkpt_at_q_table,use_X_DbGd,&
&                        l_X_abs,l_X_kerr,l_X_magn,Chi_prop,i_G_shift,Q_plus_G_sq_modulus
 use parallel_int,  ONLY:PP_wait,PP_redux_wait,PARALLEL_global_indexes,PARALLEL_WF_index,PARALLEL_WF_distribute
 use parallel_m,    ONLY:PAR_IND_Q_ibz,PAR_COM_Q_A2A,PAR_COM_RL_INDEX,PAR_IND_CON_BANDS_X,&
&                        PAR_IND_Xk_ibz,PAR_IND_VAL_BANDS_X
 use wave_func,     ONLY:WF,WF_buffer,WF_buffered_IO
 use TDDFT,         ONLY:F_xc_gspace,FXC_K_diagonal,FXC_mode,l_Fxc_in_Xo
 use xc_functionals,ONLY:F_xc_mat
 use interfaces,    ONLY:WF_load,WF_free,X_irredux
 use matrix,        ONLY:MATRIX_reset
 !
#include<y_memory.h>
 !
 type(levels)  :: Xen
 type(bz_samp) :: Xk,q
 type(X_t)     :: X
 type(DIPOLE_t):: Dip
 type(w_samp)  :: wv 
 ! 
 ! Work Space
 !
 integer          :: iq,X_par_size
 complex(SP)      :: fac,spectra(wv%n_freqs,2)
 logical          :: l_skip_non_int_eps,Macroscopic_CPU,l_Fxc_explicit
 !
 integer,external :: OPTICS_select_q_and_G
 !
 call section('*','G-space response function')
 !
 l_X_abs       = (index(Chi_prop,'abs')/=0)
 !l_X_jdos      = (index(Chi_prop,'jdos')/=0)
 !l_X_dichroism = (index(Chi_prop,'dich')/=0)
 l_X_kerr      = (index(Chi_prop,'kerr')/=0)
 !l_X_photolum  = (index(Chi_prop,'photolum')/=0)
 l_X_magn      = (index(Chi_prop,'magn')/=0) .and.n_spin>1
 !
 l_Fxc_in_Xo    = trim(FXC_mode)=="G-Fxc_in_Xo"
 l_Fxc_explicit = trim(FXC_mode)=="G-def"
 !
 if (.not.(l_Fxc_in_Xo .or. l_Fxc_explicit)) call error("Wrong FXC_mode:"//trim(FXC_mode))
 !
 if (l_Fxc_in_Xo .and. .not.l_X_magn) call error("New FXC_mode coded only for magnons")
 !
 ! Basic Checks
 call X_pre_setup(Xen,Xk,X)
 !
 allocate(X_par(2))
 allocate(X_par_lower_triangle(2))
 !
 do iq=X%iq(1),X%iq(2)
   !
   ! PARALLEL indexes
   !==================
   call PARALLEL_global_indexes(Xen,Xk,q,"Response_G_space",X=X,X_all_bands=(l_X_magn.and.X%ordering/="r"))
   !
   ! WF distribution 
   !=================
   call PARALLEL_WF_distribute(K_index=PAR_IND_Xk_ibz,B_index=PAR_IND_CON_BANDS_X(X%whoami),&
&                              Bp_index=PAR_IND_VAL_BANDS_X(X%whoami),CLEAN_UP=.TRUE.)
   !
   call PARALLEL_WF_index(COMM=PAR_COM_Q_A2A)
   !
   if (WF_buffered_IO) call WF_load(WF_buffer,0,1,X%ib,(/1,Xk%nibz/),space='B',title='-BUFFER')
   !
   ! TDDFT setup
   call TDDFT_do_X_W_typs(iq,X,wv)
   !
   ! DbGd setup
   call X_Double_Grid_setup(iq,Xk,Xk%FGbz)
   !
   ! ALDA (only once) 
   if (l_alda_fxc) call TDDFT_ALDA_G_space(Xen,Xk)
   !
   ! workaround for possible compiler bug
#if defined _PGI || defined _NV
   if (iq>1.and.size(PAR_IND_Q_ibz%n_of_elements)>1) then
#else
   if (iq>1) then
#endif
     if (.not.PAR_IND_Q_ibz%element_1D(iq)) cycle
   endif
   !
   ! Check if this q is compatible with the user defined direction in chartesian coordinates
   ! and if an additional RL vectors must be added
   i_G_shift=OPTICS_select_q_and_G(iq,q,X)
   if (i_G_shift<0) cycle
   !
   ! In TDDFT with BS based kernel eps0 is non-sense
   ! as shifted of the K diagonal
   l_skip_non_int_eps=l_bs_fxc
   !
   ! Frequencies (AFTER TDDFT SETUP!)
   call FREQUENCIES_setup(wv)
   !
   ! Response function parallel allocation
   call X_half_mat_check(Xen,Xk,wv)
   !
   call X_ALLOC_parallel(X_par(1),X_par_lower_triangle(1),X%ng,wv%n_freqs,"XUP")
   if (l_alda_fxc.and.l_Fxc_in_Xo) &
   & call X_ALLOC_parallel(X_par(2),X_par_lower_triangle(2),X%ng,wv%n_freqs,"XUP-TDDFT")
   !
   Macroscopic_CPU=X_par(1)%rows(1)<=i_G_shift.and.i_G_shift<=X_par(1)%rows(2).and.&
&                  X_par(1)%cols(1)<=i_G_shift.and.i_G_shift<=X_par(1)%cols(2)
   !
   if (iq==1) call PP_wait()
   if (iq> 1) call PP_wait(COMM=PAR_COM_Q_A2A%COMM)
   !
   ! Irredux (Xo) 
   call X_irredux(iq,"Xo",X_par(1),X_par_lower_triangle(1),Xen,Xk,wv,X,Dip)
   !
   ! Without LF. I start defining spectra=eps-1
   spectra=cZERO
   if (Macroscopic_CPU) then
     ! I start defining spectra=(eps-1)/(4pi/|q+G|^2)
     ! using the definition of epsilon-1 in terms of chi-bar
     spectra(:,1)=-X_par(1)%blc(i_G_shift,i_G_shift,:)
   endif
   call PP_redux_wait(spectra(:,1),COMM=PAR_COM_RL_INDEX%COMM)
   !
   ! Compute Xo*Fxc
   if (l_alda_fxc.and.l_Fxc_in_Xo) call X_irredux(iq,"Xo*Fxc",X_par(2),X_par_lower_triangle(2),Xen,Xk,wv,X,Dip)
   !
   if (.not.l_rpa_IP) then
     !
     ! X Dyson equation solver, i_G_shift is now handled in X_redux
     ! All cores allocated X_par(1)%blc(1,1,:), although only some have it filled properly
     call X_redux(iq,"X",X_par(1),X_par_lower_triangle(1),&
     &                   X_par(2),X_par_lower_triangle(2),wv,X,"response")
     !
     ! If l_X_abs, at variance with the IP case, after the call to X_redux,
     ! X_par now contains the factor 4*pi/bare_qpg**2
     ! constructed with the coulomb cutoff-term
     spectra(:,2)=X_par(1)%blc(1,1,:)
     !
     call PP_redux_wait(spectra(:,2),COMM=PAR_COM_RL_INDEX%COMM)
     !
   endif
   !
   if (l_bs_fxc) then
     if (iq==1) call PP_redux_wait(X_fxc)
     if (iq> 1) call PP_redux_wait(X_fxc,COMM=PAR_COM_Q_A2A%COMM)
   endif
   !
   call X_OUTPUT(iq,Xen,Xk,wv,X,spectra)
   !
   ! CLEAN (each q)
   call FREQUENCIES_reset(wv,"all")
   call MATRIX_reset(X_par(1))
   YAMBO_FREE(X_par_lower_triangle(1)%blc)
   if (l_alda_fxc.and.l_Fxc_in_Xo) then
     call MATRIX_reset(X_par(2))
     YAMBO_FREE(X_par_lower_triangle(1)%blc)
   endif
   if (use_X_DbGd) then
     YAMBO_FREE(X_DbGd_nkpt_at_q_table)
     YAMBO_FREE(X_DbGd_nkpt_at_q)
   endif
   !
 enddo
 !
 ! CLEAN
 !
 call MATRIX_reset(X_par_lower_triangle(1))
 if (l_alda_fxc.and.l_Fxc_in_Xo) call MATRIX_reset(X_par_lower_triangle(2))
 deallocate(X_par)
 deallocate(X_par_lower_triangle)
 if(WF_buffered_IO) call WF_free(WF_buffer)
 call PP_wait()
 if (allocated(F_xc_gspace)) then
   YAMBO_FREE(F_xc_gspace)
 endif
 if (allocated(F_xc_mat)) then
   YAMBO_FREE(F_xc_mat)
 endif
 if (l_bs_fxc) then
   YAMBO_FREE(FXC_K_diagonal)
 endif
 !
end subroutine
