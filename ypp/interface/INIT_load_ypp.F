!
!        Copyright (C) 2000-2018 the YAMBO team
!              http://www.yambo-code.org
!
! Authors (see AUTHORS file for details): AM
! 
! This file is distributed under the terms of the GNU 
! General Public License. You can redistribute it and/or 
! modify it under the terms of the GNU General Public 
! License as published by the Free Software Foundation; 
! either version 2, or (at your option) any later version.
!
! This program is distributed in the hope that it will 
! be useful, but WITHOUT ANY WARRANTY; without even the 
! implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE.  See the GNU General Public License 
! for more details.
!
! You should have received a copy of the GNU General Public 
! License along with this program; if not, write to the Free 
! Software Foundation, Inc., 59 Temple Place - Suite 330,Boston, 
! MA 02111-1307, USA or visit http://www.gnu.org/copyleft/gpl.txt.
!
subroutine ypp_INIT_load(defs)
 !
 use it_m,          ONLY:it,initdefs,E_unit,G_unit,V_general,initmode,&
&                        Time_unit,Bfield_unit,V_real_time,T_unit,V_nl_optics
 use wave_func,     ONLY:wf_ng
 use D_lattice,     ONLY:Tel,Bose_Temp,non_periodic_directions
 use electrons,     ONLY:n_spinor
 use interpolate,   ONLY:INTERP_shell_factor,INTERP_mode,NN_n_of_nearest
 use YPP
#if defined _YPP_RT
 use YPP_real_time,        ONLY:RT_conf,Eh_pumped_Nel,Eh_pumped_pair_deltaE,&
&                               Eh_pumped_pair_width,Probe_Keyword,Pump_Keyword,X_order,Eh_pumped_pair_energy,&
&                               Eh_pumped_pair_BZ_width,Eh_mu,Eh_temp,h_mu_autotune_thr
 use real_time,            ONLY:RT_bands
#endif
#if defined _YPP_ELPH
 use YPP_ELPH
#endif
 !
 implicit none
 !
 type(initdefs)::defs
 !
 ! RunLevels
 !
 call it('r',defs,'bzgrids',   '[R] BZ Grid') 
 call it('r',defs,'K_grid',    '[R] K-grid analysis') 
 call it('r',defs,'Q_grid',    '[R] Q-grid analysis') 
 call it('r',defs,'dos',       '[R] DOS')
 !
 ! GPL_EXCLUDE_START
 !
 call it('r',defs,'Shifted_Grid','[R] Shifted grids') 
 !
 ! GPL_EXCLUDE_END
 !
 call it('r',defs,'Random_Grid','[R] Random grids')
 call it('r',defs,'High_Symm',  '[R] High_Symmetry points and paths') 
 !
 call it('r',defs,'excitons',  '[R] Excitons')
 call it('r',defs,'electrons', '[R] Electrons (and holes)')
 call it('r',defs,'freehole',  '[R] Free hole position')
 call it('r',defs,'amplitude', '[R] Amplitude')
 !
 ! GPL_EXCLUDE_START
 !
  call it('r',defs,'ExcRadLife',  '[R] Exciton Radiative Lifetimes')
 !
 ! GPL_EXCLUDE_END
 !
 call it('r',defs,'plot',         '[R] Plot')
 call it('r',defs,'density',      '[R] Density')
 call it('r',defs,'current',      '[R] Current')
 call it('r',defs,'wannier',      '[R] Wannier 90 I/O')
 call it('r',defs,'bnds',        '[R] Bands')
 call it('r',defs,'wavefunction', '[R] Wavefunction')
#if defined _YPP_ELPH
 call it('r',defs,'eliashberg',   '[R] Eliashberg')
 call it('r',defs,'phonons',      '[R] Phonons')
 call it('r',defs,'gkkp',         '[R] Electron-Phonon databases')
#endif
#if defined _YPP_MAGNETIC
 call it('r',defs,'angular_m',    '[R] Canonical angular momentum')
 call it('r',defs,'position',     '[R] Average <r^n>, n given in the input')
#endif
 call INIT_QP_ctl_load(defs,3)
 call it('r',defs,'spin',         '[R] Spin')
 call it('r',defs,'magnetization','[R] Magnetization')
 call it('r',defs,'kpts_map',     '[R] BZ map fine grid to coarse')
 call it('r',defs,'WFs',          '[R] WF operations')
 call it('r',defs,'WFs_map',      '[R] Creat a SOC/WFs <-> noSOC/WFs map')
 call it('r',defs,'QPDBs', '[R] Quasi-particle databases')
 call it('r',defs,'QPDB_edit', '[R] Generation/editing')
 call it('r',defs,'QPDB_merge','[R] Mergering')
 call it('r',defs,'bxsf'   ,   '[R] Read BXSF files generated by Wannier90')    
 !
 call it('r',defs,'fixsyms', '[R] Reduce Symmetries')
 !
 call it('r',defs,'fixsave', '[R] Convert WFs to new format')
 !
#if defined _YPP_RT
 !
 call it('r',defs,'RealTime',     '[R] Real-Time Post-Processing')
 call it('r',defs,'RT_X',         '[R] Response functions Post-Processing')
 call it('r',defs,'RT_ph_osc',    '[R] Coherent phonon oscillations')
 !
#endif
 !
 ! GPL_EXCLUDE_START 
 !
#if defined _YPP_RT
 !
 call it('r',defs,'RTDBs',        '[R] Real-Time databases')
 !
 call it('r',defs,'Select_energy','[R] NEQ DBs from input energy window')
 call it('r',defs,'Select_kspace','[R] NEQ DBs from input energy and kspace')
 call it('r',defs,'Select_manual','[R] NEQ DBs manually created')
 call it('r',defs,'Select_Fermi', '[R] NEQ DBs according to Fermi distribution')
 !
 call it('r',defs,'RTabs',        '[R] Transient absorption')
 call it('r',defs,'RToccupations','[R] Analize time-dependent occupations')
 call it('r',defs,'RTlifetimes',  '[R] Analize time-dependent lifetimes')
 call it('r',defs,'RTdeltaRho',   '[R] Analize the density')
 !
 call it('r',defs,'RTfitbands',   '[R] Post-Processing kind: fit on bands')
 call it('r',defs,'RTtime',       '[R] Post-Processing kind: function of time')
 call it('r',defs,'RTenergy',     '[R] Post-Processing kind: function of energy')
 call it('r',defs,'RTdos',        '[R] Post-Processing kind: 2D DOS, function of time and energy')
 !
#endif
!
#if defined _YPP_SC
 call it('r',defs,'MeanPot', '[R] Mean Potential')
#endif
 !
 ! GPL_EXCLUDE_END
 !
#if defined _YPP_NL
 call it('r',defs,'nonlinear',     '[R] NonLinear Optics Post-Processing')
 call it('r',defs,'NL_X',     '[R] NonLinear Optics Response Post-Processing')
 call it('r',defs,'NL_exc',     '[R] NonLinear Optics Excitation Post-Processing')
 call it('f',defs,'PrtPwrSpec','Print power spectrum',verb_level=V_nl_optics)
#endif
 !
 ! Temperatures
 !
 call it(defs,'ElecTemp','Electronic Temperature',Tel,T_unit,verb_level=V_general)
 call it(defs,'BoseTemp','Bosonic Temperature',Bose_Temp,T_unit,verb_level=V_general)
 !
 ! DOS
 !
 call it(defs,'DOS_broad', 'Broadening of the DOS',DOS_broadening,E_unit) 
 call it(defs,'DOS_bands', 'DOS bands',DOS_bands) 
 call it(defs,'DOSERange', 'Energy range',DOS_E_range,unit=E_unit) 
 call it(defs,'DOSESteps', 'Energy steps',DOS_E_steps) 
 call it('f',defs,'DOSUsesOcc', 'Weight the DOS with the occupation factors') 
 !
 call it(defs,'WFReference', 'band and kpt index of reference WF for spin direction',WF_ref,verb_level=V_general)
 !
 ! GPL_EXCLUDE_START
 !
#if defined _YPP_RT
 !
 ! RT DBs create
 !
 call it(defs,'RTpumpNel',  '[RT] Number of electrons excited by hand per unit cell',Eh_pumped_Nel)
 call it(defs,'RTBands',    '[RT] Bands range',RT_bands)
 call it(defs,'RTpumpEhWd', '[RT] Max Energy window used in the levels pick-up',Eh_pumped_pair_width,unit=E_unit)
 ! Method 1
 call it(defs,'RTpumpEhEn', '[RT] Energy (relative to VBM/CBM) of the levels to be inverted by hand',&
&                            Eh_pumped_pair_energy,unit=E_unit)
 ! Method 2
 call it(defs,'RTpumpDE',   '[RT] Energy difference to be matched',Eh_pumped_pair_deltaE,unit=E_unit)
 call it(defs,'RTpumpBZWd', '[RT] Size if the K reagion width',Eh_pumped_pair_BZ_width)
 !
 ! The idea for Fermi occupations is to start from the 'end' of a carrier relaxation run
 call it(defs,'RTmuEh', '[RT] Chemical potentials hole | electron',Eh_mu,unit=E_unit)
 call it(defs,'RTtempEh', '[RT] Effective temperature hole | electron',Eh_temp,unit=E_unit)
 call it(defs,'RTautotuneThr', '[RT] Threshold to match no. of pumped holes and electrons.',h_mu_autotune_thr)
 !
 call it('f',defs,'LoadGhistory','[NEGF] Build the NEQ density from the G_lesser')
 call it('f',defs,'OCCgroup',    '[NEGF] Double grid states occupations are grouped')
 call it('f',defs,'IncludeEQocc','[NEGF] Include also equilibrium occupations')
 call it('f',defs,'SkipFermiFIT','[NEGF] Do a Fermi Fit of occupations (and lifetimes ratio)')
 call it('f',defs,'SeparateEH',  '[NEGF] Separate electrons from holes in the data file') 
 !
 ! TRANSIENT ABSORPTION
 !
 call it(defs,'RTFfrmat', 'Output format [3col/2col]',p_format)
 call it('f',defs,'Transmission','Compute the transient transmissions')
 call it('f',defs,'Reflectivity','Compute the transient reflectivity')
 call it('f',defs,'IncludeIP'   ,'Include the v-v and c-c contribution at IP level')
 !
#endif
 !
 ! GPL_EXCLUDE_END
 !
 ! BANDS
 !
 call it(defs,'BANDS_bands',   'Number of bands',BANDS_bands) 
 call it(defs,'BANDS_steps',   'Number of divisions',BANDS_steps) 
 call it(defs,'CIRCUIT_E_DB_path',   'SAVE obtained from the QE `bands` run (alternative to %BANDS_kpts)',CIRCUIT_E_DB_path) 
 call it(defs,'BANDS_path',    'BANDS path points labels (G,M,K,L...)',BANDS_path)
 call it('f',defs,'BANDS_built_in', 'Print the bands of the generating points of the circuit using the nearest internal point')
 call it(defs,'INTERP_mode', 'Interpolation mode (NN=nearest point, BOLTZ=boltztrap aproach)',INTERP_mode)
 call it(defs,'INTERP_NofNN', 'Number of Nearest sites in the NN method',NN_n_of_nearest)
 call it(defs,'INTERP_Grid', 'Interpolation BZ Grid',INTERP_grid)
 call it(defs,'INTERP_Shell_Fac','The bigger it is a higher number of shells is used',INTERP_shell_factor)
 !
 ! GPL_EXCLUDE_START
 !
#if defined _YPP_RT
 call it('f',defs,'NormN','Nel on the bands is renormalized to Nel in the IBZ')
 call it(defs,'NelFac'   ,'Rescale the total number of electrons',Nel_fac)
#endif
 !
 ! GPL_EXCLUDE_END
 !
 ! Wannier interface
 !
 call it(defs,'Seed','Seed name',seed_name)
 call it(defs,'WriteAMU','What to write (A, M, U)',what_to_write)
 !
 ! BZ grids
 !
 call it(defs,'cooIn','Points coordinates (in) cc/rlu/iku/alat',coo_in)
 call it(defs,'cooOut','Points coordinates (out) cc/rlu/iku/alat',coo_out)
 call it(defs,'PtsPath','Path points labels (G,M,K,L...)',PtsPath)
 call it(defs,'NPtsPath','Number of Points for each segment of the path',N_path_pts)
 call it(defs,'BZ_random_Nk','BZ Random points to be printed',BZ_random_nkpts)
 !
 call it('f',defs,'NoWeights',    ' Do not print points weight') 
 call it('f',defs,'ForceUserPts', ' Do not check the correcteness of the user points') 
 call it('f',defs,'ListPts',      ' List the internal q/k points also in the parser format') 
 call it('f',defs,'ExpandPts',    ' Expand the internal q/k points in the BZ') 
 call it('f',defs,'DipWeight',    ' Weight the contribution to the exciton WFs with the dipoles') 
 !
 ! Exciton lifetimes
 !
 call it(defs,'NonPDirs','[EXC life] Non periodic chartesian directions (X,Y,Z,XY...)',non_periodic_directions)
 call it(defs,'Texc'    ,'[EXC life] Temp',EXC_temp,T_unit)
 call it(defs,'Mexc'    ,'[EXC life] Mass (M_XY, M_ZZ)',EXC_mass)
 call it(defs,'Epsi0'    ,'[EXC life] static dielectric matrix (eps_XX | eps_YY | eps_ZZ)',epsi0)
 call it(defs,'PhiGrid' ,'[EXC life] angle grid',EXC_Phi_Grid)
 call it(defs,'Excshift'  ,'[EXC life] Energy shift',EXC_shift,E_unit)
 !
 ! WFs
 !
 call it(defs,'FFTGvecs','[FFT] Plane-waves',wf_ng,G_unit)
 call it(defs,'Degen_Step', 'Maximum energy separation of two degenerate states',&
&                           deg_energy,E_unit)
#if defined _YPP_ELPH
 call it(defs,'ResTresh', '[o/o] Treshold on processed polaronic residuals',elph_residual_treshold)
#endif
 call it(defs,'MinWeight', 'Print transitions with weight => MinWeight',min_weight,verb_level=V_general)
 call it(defs,'States','Index of the BS state(s)',state_ctl)
 call it(defs,'Cells', 'Number of cell repetitions in each direction (odd or 1)',ncell)
 call it(defs,'Hole', '[cc] Hole position in unit cell',r_hole)
 call it(defs,'WFMult', 'Multiplication factor to the excitonic wavefunction',WF_multiplier,verb_level=V_general)
 !
#if defined _YPP_MAGNETIC
 call it('f',defs,'PhaseTrick','[MAG] Phase trick for a better diagonalization')
#endif
 ! 
 ! PLOT
 !
 ! p_dir: plot cut in the a1,a2,a3 basis
 ! 
 ! p_format: (c)ube/(g)nuplot/(x)crysden
 !
 call it(defs,'Format', 'Output format [(c)ube/(g)nuplot/(x)crysden]',p_format)
 call it(defs,'Direction', '[rlu] [1/2/3] for 1d or [12/13/23] for 2d [123] for 3D',p_dir)
 call it(defs,'MagDir', 'Magnetization component',mag_dir)
 call it(defs,'CurrentDir', '[cc] Carthesian direction (used to average in 2D/3D plots or to plot in 1D)',current_dir)
 call it('f',defs,'PhaseTrick','[MAG] Phase trick for a better diagonalization')
#if defined _YPP_SC
 call it(defs,'PotValue',  'REal/IMaginary part of the mean potential',V_value)
#endif
#if defined _YPP_ELPH
 !
 !EL-PH
 !
 call it(defs,'DBsPATH',  'Path to the PW el-ph databases',elph_dbs_path)
 call it(defs,'PHfreqF',  'PWscf format file containing the phonon frequencies',ph_freqs_file)
 call it(defs,'PHmodeF',  'PWscf format file containing the phonon modes',ph_modes_file)
 call it(defs,'EfGbroad', 'Fermi surface broadening (Gamma)',elph_gamma_broad,E_unit)
 call it(defs,'PhBroad','Phonon broadening (Eliashberg & DOS)',ph_broad,E_unit)
 call it(defs,'EE_Fermi','External Fermi Level (Eliashberg)',elph_Ef,E_unit)
 call it(defs,'PhStps', 'Energy steps',elph_steps)
 call it('f',defs,'GkkpExpand','Expand the gkkp in the whole BZ')
 call it('f',defs,'GkkpConvert','Convert the gkkp to new I/O format')
 !
#endif
 !
 !BZ E Double Grid
 !
 call it(defs,'BZ_DbGd_Nk','BZ Number of points in the double grid',BZ_DbGd_nkpts_to_use)
 call it('f',defs,'SkipCheck' , 'Skip internal consistency check on k-point grids')
 call it('f',defs,'noBZExpand' , 'Keep the Double Grid k-points in the IBZ without using the symmetries')
 !
 !WFs perturbative SOC mapping
 !
 call it(defs,'SOC_DBs',"Path to the folder containing the DB with SOC",perturbative_SOC_path)
 call it(defs,'bands_to_map',"Number of bands to map",SOC_bands_to_map)
 call it(defs,'bands_buffer',"Bands to be used only as a buffer",SOC_bands_buffer)
 call it(defs,'SOC_splitting',"SOC splitting between the levels",SOC_split,E_unit) 
 !
 ! Wannier bands
 !
 call it(defs,'W90_fname','Name of w90 input file',w90_fname)
 call it(defs,'WannBnds','Range of interpolated bands, internally start from 1',wannier_bands)
 call it(defs,'DgridOrd','Order of interpolation with double grid',ord_dgrid_ipol)
 !
 ! GPL_EXCLUDE_START
 !
 call it(defs,'GammaRadius','[a.u.] Maximum distance from gamma',gamma_radius,verb_level=V_general)
 call it(defs,'OutputAlat','[a.u.] Lattice constant used for "alat" ouput format',alat_used_for_output)
 !
 ! GPL_EXCLUDE_END
 !
 ! Remove Simmetries
 !
 if(n_spinor==2) call it('f',defs,'ExpandSymm' , 'Add inv and magnetic symms if possible')
 call it('f',defs,'RmAllSymm' , 'Remove all symmetries')
 call it('f',defs,'RmTimeRev' , 'Remove Time Reversal')
 !
 call it(defs,'Efield1','First external Electric Field',E_field(1,:))
 !
 ! GPL_EXCLUDE_START
 !
 call it('f',defs,'RmSpaceInv' , 'Remove Spatial Inversion')
 call it(defs,'Efield2','Additional external Electric Field',E_field(2,:))
 call it(defs,'BField',    '[MAG] Magnetic field modulus',B_field,unit=Bfield_unit)
 call it(defs,'Bpsi',      '[MAG] Magnetic field psi angle [degree]',B_psi,unit='deg')
 call it(defs,'Btheta',    '[MAG] Magnetic field theta angle [degree]',B_theta,unit='deg')
 !
 ! GPL_EXCLUDE_END
 !
#if defined _YPP_RT
 !
 ! RT Post-Processing
 !
 call it(defs,'Xorder','Max order of the response/exc functions',X_order)
 call it(defs,'EnRngeRt','Energy range',RT_conf%W_range,unit=E_unit)
 call it(defs,'ETStpsRt','Total Energy steps',RT_conf%W_n_steps)
 call it(defs,'TimeRange','Time-window where processing is done',RT_conf%T_range,unit=Time_unit(1))
 call it(defs,'TimeStep','Time step',RT_conf%delta_T,unit=Time_unit(1))
 call it(defs,'DampMode','Damping type ( NONE | LORENTZIAN | GAUSSIAN )',RT_conf%damping)
 call it(defs,'DampFactor','Damping parameter',RT_conf%damp_factor,unit=E_unit) 
! call it(defs,'MaxContr','Maximum cotribution (%) to excitation',NL_ExcMaxContribution,verb_level=V_real_time) 
 call it('f',defs,'UseFFT','Use Fast Fourier transform with EnRange taken from dynamics',verb_level=V_real_time)
 call it('f',defs,'PrintExc','Print excited states functions')
 !
 ! GPL_EXCLUDE_START
 !
 call it(defs,'ProbeKey','Keyword to select groups of PROBE databases',Probe_Keyword,verb_level=V_real_time)
 call it(defs,'PumpKey','Keyword to select groups of PUMP databases',Pump_Keyword,verb_level=V_real_time)
 !
 call it('f',defs,'FrMinDamp','Force minimal damping',verb_level=V_real_time)
 call it('f',defs,'SkipOBS_IO','Do not dump on file the RT observables (P(t),J(t),D(t)...)')
 call it('f',defs,'RmAsymLim','Remove Asymptotic limit from P or J',verb_level=V_real_time) 
 call it('f',defs,'CheckPaths','Check inside all the paths present in the current folder',verb_level=V_real_time)
 !
 ! GPL_EXCLUDE_END
 !
#endif
 !
end subroutine
