#
# Package List
#
include ./package.list
include ./git.list
#
WGETFLAGS=--no-check-certificate -v
#
all: $(EXT_LIBS)
#
# Libraries (GIT + archives)
#
Ylib:
	@+URL="$(url_Ylib)"  ;  GBRANCH="$(branch_Ylib)"  ;  GIT="$(git_Ylib)"; LIB="$(pkgname_Ylib)"; $(getsrc_git); $(call link_it,"yambo")
#
# Libraries (archives)
#
yaml:
	@+URL="$(url_yaml)"     ; LIB="$(pkgname_yaml)"; $(getsrc)
futile:
	@+URL="$(url_futile)"   ; LIB="$(pkgname_futile)"; $(getsrc)
iotk:
	@+URL="$(url_iotk)"     ; LIB="$(pkgname_iotk)"; $(getsrc)
hdf5:
	@+URL="$(url_hdf5)"     ; LIB="$(pkgname_hdf5)"; $(getsrc)
netcdf:
	@+URL="$(url_netcdf)"   ; LIB="$(pkgname_netcdf)"; $(getsrc)
netcdff:
	@+URL="$(url_netcdff)"  ; LIB="$(pkgname_netcdff)"; $(getsrc)
pnetcdf:
	@+URL="$(url_pnetcdf)"  ; LIB="$(pkgname_pnetcdf)"; $(getsrc)
etsf_io:
	@+URL="$(url_etsf_io)"  ; LIB="$(pkgname_etsf_io)"; $(getsrc)
libxc:
	@+URL="$(url_libxc)"    ; LIB="$(pkgname_libxc)"; $(getsrc)
lapack:
	@+URL="$(url_lapack)"   ; LIB="$(pkgname_lapack)"; $(getsrc)
blacs:
	@+URL="$(url_blacs)"    ; LIB="$(pkgname_blacs)"; $(getsrc)
scalapack:
	@+URL="$(url_scalapack)"; LIB="$(pkgname_scalapack)"; $(getsrc)
petsc:
	@+URL="$(url_petsc)"    ; LIB="$(pkgname_petsc)"; $(getsrc)
slepc:
	@+URL="$(url_slepc)"    ; LIB="$(pkgname_slepc)"; $(getsrc)
fftw:
	@+URL="$(url_fftw)"     ; LIB="$(pkgname_fftw)"; $(getsrc)
fftqe:
	@+URL="$(url_fftqe)"    ; LIB="$(pkgname_fftqe)"; $(getsrc)
#
# cleaning
#
clean: clean_all
#
clean_all:
	if test ! -e keep-extlibs-stamp ; then \
          if test "$(keep_Ylib)"      != "yes" ;  then rm -fr $(pkgname_Ylib)* ../yambo ; fi ; \
          if test -s $(tarball_libxc)    && test "$(keep_libxc)"     != "yes" ;  then rm $(tarball_libxc)     ; fi ; \
          if test -s $(tarball_iotk)     && test "$(keep_iotk)"      != "yes" ;  then rm $(tarball_iotk)      ; fi ; \
          if test -s $(tarball_netcdf)   && test "$(keep_netcdf)"    != "yes" ;  then rm $(tarball_netcdf)    ; fi ; \
          if test -s $(tarball_netcdff)  && test "$(keep_netcdff)"   != "yes" ;  then rm $(tarball_netcdff)   ; fi ; \
          if test -s $(tarball_pnetcdf)  && test "$(keep_pnetcdf)"   != "yes" ;  then rm $(tarball_pnetcdf)   ; fi ; \
          if test -s $(tarball_hdf5)     && test "$(keep_hdf5)"      != "yes" ;  then rm $(tarball_hdf5)      ; fi ; \
          if test -s $(tarball_etsf_io)  && test "$(keep_etsf_io)"   != "yes" ;  then rm $(tarball_etsf_io)   ; fi ; \
          if test -s $(tarball_lapack)   && test "$(keep_lapack)"    != "yes" ;  then rm $(tarball_lapack)    ; fi ; \
          if test -s $(tarball_scalapack)&& test "$(keep_scalapack)" != "yes" ;  then rm $(tarball_scalapack) ; fi ; \
          if test -s $(tarball_blacs)    && test "$(keep_blacs)"     != "yes" ;  then rm $(tarball_blacs)     ; fi ; \
          if test -s $(tarball_petsc)    && test "$(keep_petsc)"     != "yes" ;  then rm $(tarball_petsc)     ; fi ; \
          if test -s $(tarball_slepc)    && test "$(keep_slepc)"     != "yes" ;  then rm $(tarball_slepc)     ; fi ; \
          if test -s $(tarball_yaml)     && test "$(keep_yaml)"      != "yes" ;  then rm $(tarball_yaml)      ; fi ; \
          if test -s $(tarball_fftw)     && test "$(keep_fftw)"      != "yes" ;  then rm $(tarball_fftw)      ; fi ; \
          if test -s $(tarball_fftqe)    && test "$(keep_fftqe)"     != "yes" ;  then rm $(tarball_fftqe)     ; fi ; \
          if test -s $(tarball_futile)   && test "$(keep_futile)"    != "yes" ;  then rm $(tarball_futile)    ; fi ; \
	fi
#
define getsrc
 if test ! -s $$LIB".tar.gz" ; then \
  echo "\t[$$LIB] download";\
  if [ -x $(shell which wget) ] && [ "$(shell which wget)" != "" ] ; then \
   wget $(WGETFLAGS) -O $$LIB".tar.gz" $$URL > ../../log/download_$$LIB.log 2>&1; \
  elif [ -x $(shell which curl) ] && [ "$(shell which curl)" != "" ] ; then \
   curl -L --progress-bar -o $$LIB".tar.gz" $$URL > ../../log/download_$$LIB.log 2>&1 ; \
  fi ; \
  if test ! -s $$LIB".tar.gz" ; then \
   echo "*** Unable to download $$LIB. Test whether curl or wget is installed and working," ; \
   echo "*** if you have direct access to the internet." ; \
   echo "*** If not, copy $$LIB".tar.gz" into extlibs/archive/" ; \
  fi; \
 fi
endef
#
define getsrc_git
 if test ! -s $$LIB".tar.gz" && test ! -d $$LIB ; then \
  echo "\t[$$LIB] download";\
  if [ ! "$$GBRANCH" = "none" ] ; then \
   echo " via $$GIT" ; \
   if [ ! -d $$LIB ]; then git clone $$GIT $$LIB; fi ; \
   cd $$LIB ; git checkout $$GBRANCH ; cd ../ ; \
  else \
   if [ -x $(shell which wget) ] && [ "$(shell which wget)" != "" ] ; then \
    wget $(WGETFLAGS) -O $$LIB".tar.gz" $$URL >> ../../log/download_$$LIB.log 2>&1; \
   elif [ -x $(shell which curl) ] && [ "$(shell which curl)" != "" ] ; then \
    curl -L --progress-bar -o $$LIB".tar.gz" $$URL >> ../../log/download_$$LIB.log 2>&1; \
   fi \
  fi;\
 fi
endef
#
define link_it
 if test -s $$LIB".tar.gz" ; then \
  if ! test -d  ../$(1); then mkdir ../$(1); fi; \
  cd ../$(1); \
  gunzip < ../archive/$$LIB".tar.gz" | ../../config/missing --run tar xf - ; fi
endef
