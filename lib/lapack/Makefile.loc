#
#===============================
# Yambo package
#===============================
#
include ../../config/setup
include ../archive/package.list
#
LIBNAME=liblapack.a
LIBPATH=$(libs_prefix)/$(fc_kind)/${fc}
LIBRARY=$(LIBPATH)/lib/$(LIBNAME)
#
PACKAGE=$(pkgname_lapack)
#
include ../config/external_libs_commons.mk
include ../config/external_libs_defs.mk
#
#CONFFLAGS=-DCMAKE_INSTALL_LIBDIR=$(LIBPATH)/lib
#
all: $(LIBRARY)
#
uncompress:
	@$(uncompress)

configure: uncompress
	@if test -d $(PACKAGE) && ! test -f configured.stamp ; then \
         echo "\t[$(PACKAGE)] configuration"; \
	 cd $(PACKAGE); \
	 mkdir build_static ; cd build_static ; \
	 ( cmake -DCMAKE_INSTALL_LIBDIR=$(LIBPATH)/lib -DBUILD_SHARED_LIBS=OFF .. ) >> ${compdir}/log/config_$(PACKAGE).log 2>&1 ; \
	 cd .. ; mkdir build_shared ; cd build_shared ; \
	 ( cmake -DCMAKE_INSTALL_LIBDIR=$(LIBPATH)/lib -DBUILD_SHARED_LIBS=ON .. ) >> ${compdir}/log/config_$(PACKAGE).log 2>&1 ; \
	 cd .. ; \
	 touch ../configured.stamp ; \
	fi

compile: uncompress configure
	@if test -d $(PACKAGE) && ! test -f compiled.stamp ; then \
         echo "\t[$(PACKAGE)] compilation"; \
         cd $(PACKAGE); \
	 cd build_static ; ( cmake --build . ) >> ${compdir}/log/compile_$(PACKAGE).log 2>&1 ; cd .. ; \
	 cd build_shared ; ( cmake --build . ) >> ${compdir}/log/compile_$(PACKAGE).log 2>&1 ; cd .. ; \
	 touch compiled.stamp; \
	fi

install: uncompress configure compile
	@if ! test -e installed.stamp ; then \
         echo "\t[$(PACKAGE)] installation"; \
         cd $(PACKAGE); \
	 cd build_static ; ( cmake --build . --target install ) >> ${compdir}/log/install_$(PACKAGE).log 2>&1 ; cd .. ; \
	 cd build_shared ; ( cmake --build . --target install ) >> ${compdir}/log/install_$(PACKAGE).log 2>&1 ; cd .. ; \
	 touch ../installed.stamp; \
	fi

$(LIBRARY): uncompress configure compile install
#
# cleaning
#
clean:
	@if test -d $(PACKAGE) && test -f configured.stamp ; then \
	 rm -rf compiled.stamp configured.stamp installed.stamp; \
	 cd $(PACKAGE);  \
	 rm -rf build_static build_shared ; \
	fi

clean_all: clean
	@$(rm_the_lib)
