/*
  License-Identifier: GPL
 
  Copyright (C) 2016 The Yambo Team
 
  Authors (see AUTHORS file for details): DS 
 
*/

 use y_memory,       ONLY:MEM_global_mesg
 use parallel_m,   ONLY:PAR_COM_HOST
 use parallel_int, ONLY:PP_redux_wait,PP_wait

#include<y_memory.h>

 integer(IPL) :: HOST_SIZE(1)

#if defined _MPI
 integer :: isize_mem

 /* With MPI */ 

#define CHECK_ALLOC_A(SIZE) \
  HOST_SIZE=0 NEWLINE \
  HOST_SIZE(1)=product(SIZE) NEWLINE \
  call PP_redux_wait(HOST_SIZE,COMM=PAR_COM_HOST%COMM) NEWLINE \
  do isize_mem=2,size(HOST_size) NEWLINE \
    HOST_size(isize_mem)=1 NEWLINE \
  enddo NEWLINE \
  if (PAR_COM_HOST%CPU_id==0 ) then

#define CHECK_ALLOC_B(x,HOST_SIZE) \
    call MEM_global_mesg(QUOTES x QUOTES,kind(x),HOST_SIZE) NEWLINE \
    deallocate(x) NEWLINE \
  endif NEWLINE \
  call PP_wait(COMM=PAR_COM_HOST%COMM)

#define YAMBO_PAR_ALLOC_CHECK1(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC1(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif
#define YAMBO_PAR_ALLOC_CHECK2(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC2(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif
#define YAMBO_PAR_ALLOC_CHECK3(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC3(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif
#define YAMBO_PAR_ALLOC_CHECK4(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC4(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif
#define YAMBO_PAR_ALLOC_CHECK5(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC5(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif
#define YAMBO_PAR_ALLOC_CHECK6(x,SIZE) \
  if (PAR_COM_HOST%n_CPU>1) then NEWLINE \
    CHECK_ALLOC_A(SIZE) NEWLINE \
    SIMPLE_ALLOC6(x,HOST_SIZE) NEWLINE \
    CHECK_ALLOC_B(x,HOST_SIZE) NEWLINE \
  endif

#else

 /* Without MPI */

#define YAMBO_PAR_ALLOC_CHECK1(x,SIZE)
#define YAMBO_PAR_ALLOC_CHECK2(x,SIZE)
#define YAMBO_PAR_ALLOC_CHECK3(x,SIZE)
#define YAMBO_PAR_ALLOC_CHECK4(x,SIZE)
#define YAMBO_PAR_ALLOC_CHECK5(x,SIZE)
#define YAMBO_PAR_ALLOC_CHECK6(x,SIZE)

#endif

#define YAMBO_PAR_ALLOC1(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK1(x,SIZE) NEWLINE \
  YAMBO_ALLOC1(x,SIZE)
#define YAMBO_PAR_ALLOC2(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK2(x,SIZE) NEWLINE \
  YAMBO_ALLOC2(x,SIZE)
#define YAMBO_PAR_ALLOC3(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK3(x,SIZE) NEWLINE \
  YAMBO_ALLOC3(x,SIZE)
#define YAMBO_PAR_ALLOC4(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK4(x,SIZE) NEWLINE \
  YAMBO_ALLOC4(x,SIZE)
#define YAMBO_PAR_ALLOC5(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK5(x,SIZE) NEWLINE \
  YAMBO_ALLOC5(x,SIZE)
#define YAMBO_PAR_ALLOC6(x,SIZE) \
  YAMBO_PAR_ALLOC_CHECK6(x,SIZE) NEWLINE \
  YAMBO_ALLOC6(x,SIZE)

#define SIMPLE_ALLOC1(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1)))
#define SIMPLE_ALLOC2(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1),SIZE(2)))
#define SIMPLE_ALLOC3(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1),SIZE(2),SIZE(3)))
#define SIMPLE_ALLOC4(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1),SIZE(2),SIZE(3),SIZE(4)))
#define SIMPLE_ALLOC5(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1),SIZE(2),SIZE(3),SIZE(4),SIZE(5)))
#define SIMPLE_ALLOC6(x,SIZE) \
    SIMPLE_ALLOC(x,(SIZE(1),SIZE(2),SIZE(3),SIZE(4),SIZE(5),SIZE(6)))
